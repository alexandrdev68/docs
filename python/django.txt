Example httpd.conf virtualserver settings:
		<VirtualHost *:80>
		    ServerName jobs.django.local                 
		    ServerAlias jobs.django.local www.jobs.django.local
		    WSGIScriptAlias / /home/sasha/Projects/www/djangocms_jobs/djangocms_jobs/wsgi.py
		    WSGIDaemonProcess jobs.django.local python-path=/home/sasha/Projects/www/djangocms_jobs:/home/sasha/Projects/www/django2_env/lib/python2.7/site-packages
		    WSGIProcessGroup jobs.django.local
		    <Directory /home/sasha/Projects/www/djangocms_jobs/>
		        <Files wsgi.py>
		            Require all granted
		        </Files>
		    </Directory>
		    ErrorLog "/var/log/apache2/jobs.django.local-error.log"
		    CustomLog "/var/log/apache2/jobs.django.local-access.log" common
		</VirtualHost>
		
At settings.py add 
	ALLOWED_HOSTS = ['.django.local'] 
	
At DATABASES = {...
	 'NAME': os.path.join(BASE_DIR,'project.db'), instead 'NAME': 'project.db'
	 
And don't forget set permissions to files in project folder.
	 

Для создания проекта джанго необходимо перейти в директорию, где будет располагаться ваш проект и ввести следующую команду:

	django-admin.py startproject mysite_name
	
Для создания шаблона для старницы:
-создаем папку templates в папке mysite_name, создаем папку с именем нашего приложения и в ней создаем файл с именем урл или index.html;
-меняем в файле settings.py параметр 

	'DIRS': [os.path.join(BASE_DIR, 'templates')], - для случая, когда все шаблоны
	

Использование вебсокетов с помощью python omnibusd:

 - установка: 
 	pip install django-omnibus
 	
 	Добавляем в настройки Django:
 	INSTALLED_APPS = (
	    # other apps
	    'omnibus',
	)
	контекстный процессор:
	TEMPLATE_CONTEXT_PROCESSORS = (
	    # other context processors
	    'omnibus.context_processors.omnibus',
	)
	
	Запускаем сервер omnibus:
	python manage.py omnibusd
	
	Для отправки сообщения в специализированный канал можно использовать высокоуровневое АПИ:
	from omnibus.api import publish

	def send_hello_world():
	    publish(
	        'mychannel',  # the name of the channel
	        'hello',  # the `type` of the message/event, clients use this name
	                  # to register event handlers
	        {'text': 'Hello world'},  # payload of the event, needs to be
	                                  # a dict which is JSON dumpable.
	        sender='server'  # sender id of the event, can be None.
	    )
	
	send_hello_world()
	
	Вышеизложенный код отправит (возможно :-)) сообщение с типом 'hello' в канал 'mychannel'. Payload доставит его ко всем соединениям,
	подписанным на канал. 
	
	
	
	
